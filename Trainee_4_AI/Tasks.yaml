Task 1:
  Task name: Create a Bank Account System

  Requirements:
    Design a class BankAccount that represents a bank account with basic functionalities. Your BankAccount class should have the following features:
    Attributes:
    account_number: A unique identifier for the account (integer).
    account_holder_name: Name of the account holder (string).
    balance: The current balance in the account (float).

    Methods:
    deposit(amount): Add a specified amount to the balance.
    withdraw(amount): Subtract a specified amount from the balance (if sufficient funds are available).
    get_balance(): Return the current balance of the account.
    get_account_info(): Return a string summarizing the account details (account number, account holder name, and balance).
    
    Additional Requirements:
      Ensure that the withdraw method only allows withdrawal if the balance is sufficient.
      Provide a constructor to initialize the account number, account holder name, and initial balance.

    Example:
      Account Holder: John Doe
      Account Number: 123456
      Balance: 1000.50
      
      After Deposit: 200.00
      New Balance: 1200.50
      
      After Withdrawal: 500.00
      New Balance: 700.50

-------------------------------------

Task 2:
  Task name: Data Visualization

  Goal:
    Visualize the given dataset (https://www.kaggle.com/datasets/shree1992/housedata) 

  Requirements:
    Load the dataset
    Perform basic data cleaning (if needed) and explore the dataset (using .describe(), .info(), etc.).
    Create the following visualizations:
      A scatter plot of features (yr_built,floors) vs price and explain which one impacts the price more.
      A box plot for a single feature to identify outliers.
      A heatmap to visualize the correlation between features.
      A line graph to show a trend.

-------------------------------------

Task 3:
  Task name: Build a Simple Chatbot Web Application Using LLM

  Goal:
    Create a web-based chatbot interface that interacts with a Large Language Model (LLM) via REST API. The app should support real-time messaging and present a UI.

  Requirements:
    The app should include:
      A user input field where users can type their message.
      A chat history area where the conversation is displayed.
      A clean, attractive UI that resembles a modern chat interface (similar to messaging apps like WhatsApp, Messenger, etc.).
      An "Ask" button to send the user's query to the backend REST API
      Real-time response from the chatbot.

  OpenAI key: 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

-------------------------------------
GOOD LUCK!
